
# telegram libs
import telebot
from telebot import types
import calendar
import datetime

# config
import config
from config import bot
from config import databaseHelper
#
#import dateutil.parser

def showEvents(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,
    –° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
    
    Parameters
    ----------
    message
        –û–±—ä–µ–∫—Ç message.
    """
    # keyboard
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    addEventButton = types.KeyboardButton(config.addEventLabel)
    goMainMenuButton = types.KeyboardButton(config.goMainMenu)
    markup.add(addEventButton, goMainMenuButton)
    # working with json
    currentChatId = message.chat.id
    databaseHelper.save(currentChatId, 'prevMenuId', 0)
    databaseHelper.save(currentChatId, 'status', 0)
    # sending
    events = databaseHelper.get(currentChatId, 'events')
    botMessage = ""
    if len(events) <= 0:
        botMessage = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–æ—Ç—å –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.</b>\n\n"
        botMessage += "<i>–ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è,</i>"
        botMessage += "<i>–ø—Ä–æ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–µ —Ö–æ—Ç–∏–º –∑–∞–±—ã—Ç—å</i>"
        botMessage += "<i>(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ)</i>"
    elif len(events) <= 5:
        botMessage = "<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b>\n"
        botMessage += "<i>(—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üí£)</i>"
    else:
        botMessage = "<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:üìãüò•:</b>\n"
        botMessage += "<i>(—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üí£)</i>"
    bot.send_message(message.chat.id, botMessage, reply_markup=markup, parse_mode='html')

    if len(events) > 0:
        eventsMessage = ""
        for number, event in enumerate(events, 1):
            if event["date"]=="29.04.2020":
                eventsMessage += "üí£<b><i>%s.</i></b> %s %s %s \n" % (number, event["date"], event["time"], event["eventsName"])
            else:
                eventsMessage += "<b><i>%s.</i></b> %s %s %s \n" % (number, event["date"], event["time"], event["eventsName"])
        inlineMarkup = types.InlineKeyboardMarkup(row_width=1)
        crumbButton = types.InlineKeyboardButton('‚ò∞', callback_data='editevents')
        inlineMarkup.add(crumbButton)
        bot.send_message(message.chat.id, eventsMessage, reply_markup=inlineMarkup, parse_mode='html')
    else:
        pass

def addEvent(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    –° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.

    Parameters
    ----------
    message
        –û–±—ä–µ–∫—Ç message.
    """

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    goBackButton = types.KeyboardButton(config.goBack)
    markup.add(goBackButton)
    botMessage = "<b>–ö–∞–∫ –º—ã –Ω–∞–∑–æ–≤–µ–º —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</b>\n\n"
    botMessage += "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (hh.mm dd.mm.yy event name)"
    bot.send_message(message.chat.id, botMessage, reply_markup=markup, parse_mode='html')
    
    # working with json
    currentChatId = message.chat.id
    prevID = config.IDaddEvent
    status = 2
    databaseHelper.save(currentChatId, 'prevMenuId', prevID)
    databaseHelper.save(currentChatId, 'status', status)
    pass

def createEventsDoneMarkup(call, events):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å
    –ö–Ω–æ–ø–∫–∞–º–∏ –∑–∞–¥–∞—á –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!

    Parameters
    ----------
    call
        –û–±—ä–µ–∫—Ç call.
    events
        –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏–π
    """
    eventsItems = []
    for number, event in enumerate(events, 1):
        item = types.InlineKeyboardButton(f"{number}. {event['eventsName']}", callback_data=f"DeleventID={number}")
        eventsItems.append(item)
    doneButton = types.InlineKeyboardButton(config.doneLabel, callback_data='eventsEditDone')
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(*eventsItems, doneButton)
    bot.edit_message_text(chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=config.deleteTaskMessage,
                        reply_markup=markup)

# def validate_iso( sval ):
    
#     try:
#         valid_datetime = dateutil.parser.parse(sval)
#         if valid_datetime==True:
#             return True
#     except ValueError:
#         return False

def addEventDone(message):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ç.–µ. status == 2

    Parameters
    ----------
    message
        –û–±—ä–µ–∫—Ç message.
    """
    # working with json
    currentChatId = message.chat.id
    status = databaseHelper.get(currentChatId, 'status')
    if status == 2:
        
        events = databaseHelper.get(currentChatId, 'events')
        eventMessage = message.text
        eventMessageList = eventMessage.split()
        eventTime = eventMessageList[0]
        eventDate = eventMessageList[1]
        eventsName= eventMessageList[2]
        newEvent = {
            "time": eventTime,
            "date": eventDate,
            "eventsName": eventsName
        }  
        events.append(newEvent)

        databaseHelper.save(currentChatId, 'events', events)
        bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=None)
        # if validate_iso(eventTime) ==True or validate_iso(eventDate)==True:  
            
            
        # else:
        #     bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥", reply_markup=None) 
        #     pass
        
        return True
    else:
        return False



def eventsCallback(call):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏–π
    –î–ª—è –∑–∞–¥–∞—á: –≤—ã–≤–æ–¥ –∑–∞–¥–∞—á –∏ –∏–∫–æ–Ω–∫–∏,
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É.

    Parameters
    ----------
    call
        –û–±—ä–µ–∫—Ç call.
    """
    # working with json
    currentChatId = call.message.chat.id
    events = databaseHelper.get(currentChatId, 'events')
    if call.data == 'editevents':
        # sending
        createEventsDoneMarkup(call, events)
    elif call.data == 'eventsEditDone':
        if len(events) > 0:
            eventsMessage = ""
            for number, event in enumerate(events, 1):
                eventsMessage += f"<b><i>{number}.</i></b> {event['eventsName']}"
                
            inlineMarkup = types.InlineKeyboardMarkup(row_width=1)
            crumbButton = types.InlineKeyboardButton('‚ò∞', callback_data='editevents')
            inlineMarkup.add(crumbButton)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=eventsMessage,
                                reply_markup=inlineMarkup,
                                parse_mode='html')
        else:
            botMessage = "<i>–¢—ã —Ç–æ–∂–µ –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –æ–Ω –ø—É—Å—Ç?</i>"
            bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id = call.message.message_id,
                                text=botMessage,
                                reply_markup=None,
                                parse_mode='html')
    elif call.data.find('DeleventID=') != -1:
        newevents = events
        for number, event in enumerate(events, 1):
            deleventId = "DeleventID=" + str(number)
            if call.data == deleventId:
                # delete event
                newevents.pop(number - 1)
                databaseHelper.save(currentChatId, 'events', newevents)
                # sending
                events = databaseHelper.get(currentChatId, 'events')
                if len(events) > 0:
                    createEventsDoneMarkup(call, events)
                else:
                    doneButton = types.InlineKeyboardButton(config.doneLabel, callback_data='eventsEditDone')
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    markup.add(doneButton)
                    bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id = call.message.message_id,
                                        text=config.nothingForDelete,
                                        reply_markup=markup)
                break
    else:
        pass
